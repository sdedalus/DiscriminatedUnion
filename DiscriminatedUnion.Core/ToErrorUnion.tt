<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
string GenericType(int arity) => $"TErr{arity.ToString()}";

string GenericTypes(int arity) => string.Join(",", Enumerable.Range(1, arity).Select(x => GenericType(x)));

string GenericConstraints(int arity) => string.Join("\n			", Enumerable.Range(1, arity).Select(x => $"where {GenericType(x)} : Exception"));

string GenericCatch(int arity, int current) => "catch ( " + GenericType(current) + " ex) { return new Union<T, " + GenericTypes(arity) + ">(ex); }";

string GenericCatchs(int arity) => string.Join("\n			", Enumerable.Range(1, arity).Select(x => GenericCatch(arity, x)));

#>
namespace DiscriminatedUnion
{
	using System;
	/// <summary>
	/// Nice ways to work with a Union type.
	/// </summary>
	public static partial class Union
	{
<#
foreach(var item in Enumerable.Range(1,15))
{#>
		public static Union<T, <#=GenericTypes(item)#>> ToErrorUnion<T, <#=GenericTypes(item)#>>(this Func<T> factory)
		<#=GenericConstraints(item)#>
		{
			try
			{
				return new Union<T, <#=GenericTypes(item)#>>(factory());
			}
			<#= GenericCatchs(item) #>
		}
<#
}#>
	}
}