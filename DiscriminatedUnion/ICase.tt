<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<#
string GenericType(int arity) => $"T{arity.ToString()}";

string GenericTypes(int arity) => string.Join(",", Enumerable.Range(1, arity).Select(x => GenericType(x)));
	
string ReverseGenericTypes(int arity) => string.Join(",", Enumerable.Range(1, arity).Reverse().Select(x => GenericType(x)));

string ReverseGenericTypesCovariant(int arity) => string.Join(",", Enumerable.Range(1, arity).Reverse().Select(x => $"out {GenericType(x)}"));
#>
using System;
namespace DiscriminatedUnion
{<#
foreach(var item in Enumerable.Range(1,16))
{#> 
	public interface ICase<<#= ReverseGenericTypesCovariant(item)#>, TReturn> : IDefault<TReturn>
	{
		<#= item > 1 ? "ICase": "IDefault"#><<#= ReverseGenericTypes(item - 1)#><#= item > 1 ? ",": ""#>TReturn> Case(Func<<#= GenericType(item)#>, TReturn> func);

		ICase<<#= ReverseGenericTypes(item)#>, TReturn> Case(Func<<#= GenericType(item)#>, bool> condition, Func<<#= GenericType(item)#>, TReturn> func);
	}

<#
}
#>}