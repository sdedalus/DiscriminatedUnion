<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
string GenericType(int arity) => $"TSub{arity.ToString()}";

string GenericTypes(int arity) => string.Join(",", Enumerable.Range(1, arity).Select(x => GenericType(x)));
#>
namespace DiscriminatedUnion
{
	using System;
	/// <summary>
	/// Nice ways to work with a Union type.
	/// </summary>
	public static partial class Union
	{
<#
foreach(var item in Enumerable.Range(1,16))
{#>
		public static Func<Union<<#=GenericTypes(item)#>>, TReturn> CreateMap<<#=GenericTypes(item)#>, TReturn>(Func<ICase<<#=GenericTypes(item)#>, TReturn>, TReturn> map)
		{
			return Fun((Union<<#=GenericTypes(item)#>> v) => map(v.Match<TReturn>()));
		}
<#
}#>
	}
}