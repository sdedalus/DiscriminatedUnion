<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<#
string GenericType(int arity) => $"T{arity.ToString()}";

string GenericTypes(int arity) => string.Join(",", Enumerable.Range(1, arity).Select(x => GenericType(x)));
	
string ReverseGenericTypes(int arity) => string.Join(",", Enumerable.Range(1, arity).Reverse().Select(x => GenericType(x)));

string ReverseGenericTypesCovariant(int arity) => string.Join(",", Enumerable.Range(1, arity).Reverse().Select(x => $"out {GenericType(x)}"));
#>
using DiscriminatedUnion;
using AutoMapper;
namespace DiscriminatedUnion.AutoMap
{<#
foreach(var item in Enumerable.Range(1,16))
{#>

	public class FromUnionConverter<<#=GenericTypes(item)#>, TDestination> : ITypeConverter<Union<<#=GenericTypes(item)#>>, TDestination>
	{
		public TDestination Convert(Union<<#=GenericTypes(item)#>> source, TDestination destination, ResolutionContext context)
		{
			return source.Match<TDestination>()<#
		foreach(var i in Enumerable.Range(1,item))
		{#>

				.Case(v => Mapper.Map<TDestination>(v))<#}#>

				.Default(() => default(TDestination));
		}
	}

<#
}
#>}